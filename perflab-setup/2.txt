#include <stdio.h>
#include <stdlib.h>
#include "cs1300bmp.h"
#include <iostream>
#include <fstream>
#include "Filter.h"

using namespace std;

#include "rdtsc.h"

//
// Forward declare the functions
//
Filter * readFilter(string filename);
double applyFilter(Filter *filter, cs1300bmp *input, cs1300bmp *output);

int
main(int argc, char **argv)
{

  if ( argc < 2) {
    fprintf(stderr,"Usage: %s filter inputfile1 inputfile2 .... \n", argv[0]);
  }

  //
  // Convert to C++ strings to simplify manipulation
  //
  string filtername = argv[1];

  //
  // remove any ".filter" in the filtername
  //
  string filterOutputName = filtername;
  string::size_type loc = filterOutputName.find(".filter");
  if (loc != string::npos) {
    //
    // Remove the ".filter" name, which should occur on all the provided filters
    //
    filterOutputName = filtername.substr(0, loc);
  }

  Filter *filter = readFilter(filtername);

  double sum = 0.0;
  int samples = 0;

  for (int inNum = 2; inNum < argc; inNum++) {
    string inputFilename = argv[inNum];
    string outputFilename = "filtered-" + filterOutputName + "-" + inputFilename;
    struct cs1300bmp *input = new struct cs1300bmp;
    struct cs1300bmp *output = new struct cs1300bmp;
    int ok = cs1300bmp_readfile( (char *) inputFilename.c_str(), input);

    if ( ok ) {
      double sample = applyFilter(filter, input, output);
      sum += sample;
      samples++;
      cs1300bmp_writefile((char *) outputFilename.c_str(), output);
    }
    delete input;
    delete output;
  }
  fprintf(stdout, "Average cycles per sample is %f\n", sum / samples);

}

struct Filter *
readFilter(string filename)
{
  ifstream input(filename.c_str());

  if ( ! input.bad() ) {
    int size = 0;
    input >> size;
    Filter *filter = new Filter(size);
    int div;
    input >> div;
    filter -> setDivisor(div);
    for (int i=0; i < size; i++) {
      for (int j=0; j < size; j++) {
	int value;
	input >> value;
	filter -> set(i,j,value);
      }
    }
    return filter;
  } else {
    cerr << "Bad input in readFilter:" << filename << endl;
    exit(-1);
  }
}


double
applyFilter(struct Filter *filter, cs1300bmp *input, cs1300bmp *output)
{

  long long cycStart, cycStop;

  cycStart = rdtscll();

  unsigned int width=output -> width = input -> width;
  unsigned int height=output -> height = input -> height;
  width=width-1;
  height=height-1;
    
  //unsigned int width=output->width-1;
  //unsigned int height=output->height-1;
  //unsigned int size=filter->getSize();
  unsigned int divisor=filter->getDivisor();
  unsigned int row,col,value;
  
  //int Filter2[size][size];
  unsigned int v1=filter->get(0,1);
  unsigned int v2=filter->get(1,0);
  unsigned int v3=filter->get(0,2);
  unsigned int v4=filter->get(2,0);
  unsigned int v5=filter->get(1,2);
  unsigned int v6=filter->get(2,1);
  unsigned int v7=filter->get(0,0);
  unsigned int v8=filter->get(1,1);
  unsigned int v9=filter->get(2,2);

  unsigned int plane1,plane2,plane3,plane4,plane5,plane6,plane7,plane8,plane9;
  //int plane10,plane11,plane12;
  for(row=1;row<height;row+=1){
      for(col=1;col<width;col+=1){
          
          plane1=input->color[0][row-1][col]*v1;
          plane2=input->color[0][row][col-1]*v2;
          plane3=input->color[0][row-1][col+1]*v3;
          plane4=input->color[0][row+1][col-1]*v4;
          plane5=input->color[0][row][col+1]*v5;
          plane6=input->color[0][row+1][col]*v6;
          plane7=input->color[0][row-1][col-1]*v7;
          plane8=input->color[0][row][col]*v8;
          plane9=input->color[0][row+1][col+1]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          if(value<0){
              value=0;
          }
          if(value>255){
              value=255;
          }
          //value = value < 0 ? 0 : value > 255 ? 255 : value;
          output->color[0][row][col]=value;
     /*     
          plane1=input->color[0][row-1][col+1]*v1;
          plane2=input->color[0][row][col]*v2;
          plane3=input->color[0][row-1][col+2]*v3;
          plane4=input->color[0][row+1][col]*v4;
          plane5=input->color[0][row][col+2]*v5;
          plane6=input->color[0][row+1][col+1]*v6;
          plane7=input->color[0][row-1][col]*v7;
          plane8=input->color[0][row][col+1]*v8;
          plane9=input->color[0][row+1][col+2]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          //value = value < 0 ? 0 : value > 255 ? 255 : value;
          if(value<0){
              value=0;
          }
          if(value>255){
              value=255;
          }
          output->color[0][row][col+1]=value;
          }
      */
      /*for(;col<width;col++){
          plane1=input->color[0][row-1][col]*v1;
          plane2=input->color[0][row][col-1]*v2;
          plane3=input->color[0][row-1][col+1]*v3;
          plane4=input->color[0][row+1][col-1]*v4;
          plane5=input->color[0][row][col+1]*v5;
          plane6=input->color[0][row+1][col]*v6;
          plane7=input->color[0][row-1][col-1]*v7;
          plane8=input->color[0][row][col]*v8;
          plane9=input->color[0][row+1][col+1]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          value = value < 0 ? 0 : value > 255 ? 255 : value;
          output->color[0][row][col]=value;
          
      }*/
      }
      }
    
    for(row=1;row<height;row+=1){
      for(col=1;col<width;col+=1){
          
          plane1=input->color[1][row-1][col]*v1;
          plane2=input->color[1][row][col-1]*v2;
          plane3=input->color[1][row-1][col+1]*v3;
          plane4=input->color[1][row+1][col-1]*v4;
          plane5=input->color[1][row][col+1]*v5;
          plane6=input->color[1][row+1][col]*v6;
          plane7=input->color[1][row-1][col-1]*v7;
          plane8=input->color[1][row][col]*v8;
          plane9=input->color[1][row+1][col+1]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          if(value<0){
              value=0;
          }
          if(value>255){
              value=255;
          }
          //value = value < 0 ? 0 : value > 255 ? 255 : value;
          output->color[1][row][col]=value;
         /* 
          plane1=input->color[1][row-1][col+1]*v1;
          plane2=input->color[1][row][col]*v2;
          plane3=input->color[1][row-1][col+2]*v3;
          plane4=input->color[1][row+1][col]*v4;
          plane5=input->color[1][row][col+2]*v5;
          plane6=input->color[1][row+1][col+1]*v6;
          plane7=input->color[1][row-1][col]*v7;
          plane8=input->color[1][row][col+1]*v8;
          plane9=input->color[1][row+1][col+2]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          //value = value < 0 ? 0 : value > 255 ? 255 : value;
          if(value<0){
              value=0;
          }
          if(value>255){
              value=255;
          }
          output->color[1][row][col+1]=value;
          }
        */
        /*for(;col<width;col++){
            plane1=input->color[1][row-1][col]*v1;
          plane2=input->color[1][row][col-1]*v2;
          plane3=input->color[1][row-1][col+1]*v3;
          plane4=input->color[1][row+1][col-1]*v4;
          plane5=input->color[1][row][col+1]*v5;
          plane6=input->color[1][row+1][col]*v6;
          plane7=input->color[1][row-1][col-1]*v7;
          plane8=input->color[1][row][col]*v8;
          plane9=input->color[1][row+1][col+1]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          value = value < 0 ? 0 : value > 255 ? 255 : value;
          output->color[1][row][col]=value;
          
        }*/
      }
      }
    for(row=1;row<height;row+=1){
      for(col=1;col<width;col+=1){
          
          plane1=input->color[2][row-1][col]*v1;
          plane2=input->color[2][row][col-1]*v2;
          plane3=input->color[2][row-1][col+1]*v3;
          plane4=input->color[2][row+1][col-1]*v4;
          plane5=input->color[2][row][col+1]*v5;
          plane6=input->color[2][row+1][col]*v6;
          plane7=input->color[2][row-1][col-1]*v7;
          plane8=input->color[2][row][col]*v8;
          plane9=input->color[2][row+1][col+1]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          //value = value < 0 ? 0 : value > 255 ? 255 : value;
          if(value<0){
              value=0;
          }
          if(value>255){
              value=255;
          }
          output->color[2][row][col]=value;
          /*
          plane1=input->color[2][row-1][col+1]*v1;
          plane2=input->color[2][row][col]*v2;
          plane3=input->color[2][row-1][col+2]*v3;
          plane4=input->color[2][row+1][col]*v4;
          plane5=input->color[2][row][col+2]*v5;
          plane6=input->color[2][row+1][col+1]*v6;
          plane7=input->color[2][row-1][col]*v7;
          plane8=input->color[2][row][col+1]*v8;
          plane9=input->color[2][row+1][col+2]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          //value = value < 0 ? 0 : value > 255 ? 255 : value;
          if(value<0){
              value=0;
          }
          if(value>255){
              value=255;
          }
          output->color[2][row][col+1]=value;
          */
          }
        
        /*for(;col<width;col++){
            plane1=input->color[2][row-1][col]*v1;
          plane2=input->color[2][row][col-1]*v2;
          plane3=input->color[2][row-1][col+1]*v3;
          plane4=input->color[2][row+1][col-1]*v4;
          plane5=input->color[2][row][col+1]*v5;
          plane6=input->color[2][row+1][col]*v6;
          plane7=input->color[2][row-1][col-1]*v7;
          plane8=input->color[2][row][col]*v8;
          plane9=input->color[2][row+1][col+1]*v9;
          
          value=plane1+plane2+plane3+plane4+plane5+plane6+plane7+plane8+plane9;
          value=value/divisor;
          value = value < 0 ? 0 : value > 255 ? 255 : value;
          output->color[2][row][col]=value;
        }*/
      }
    cycStop = rdtscll();
  double diff = cycStop - cycStart;
  double diffPerPixel = diff / (output -> width * output -> height);
  fprintf(stderr, "Took %f cycles to process, or %f cycles per pixel\n",
	  diff, diff / (output -> width * output -> height));
  return diffPerPixel;
  }

  /*for(int col = 1; col < (input -> width) - 1; col = col + 1) {
    for(int row = 1; row < (input -> height) - 1 ; row = row + 1) {
      for(int plane = 0; plane < 3; plane++) {

	output -> color[plane][row][col] = 0;

	for (int j = 0; j < filter -> getSize(); j++) {
	  for (int i = 0; i < filter -> getSize(); i++) {	
	    output -> color[plane][row][col]
	      = output -> color[plane][row][col]
	      + (input -> color[plane][row + i - 1][col + j - 1] 
		 * filter -> get(i, j) );
	  }
	}
	
	output -> color[plane][row][col] = 	
	  output -> color[plane][row][col] / filter -> getDivisor();

	if ( output -> color[plane][row][col]  < 0 ) {
	  output -> color[plane][row][col] = 0;
	}

	if ( output -> color[plane][row][col]  > 255 ) { 
	  output -> color[plane][row][col] = 255;
	}
      }
    }
  }*/
 